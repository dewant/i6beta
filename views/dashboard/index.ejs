<a class="weatherwidget-io" href="https://forecast7.com/en/n7d70109d02/cilacap/" data-label_1="CILACAP" data-label_2="WEATHER"
  data-theme="original">WEATHER</a>
<script>
  !function (d, s, id) { var js, fjs = d.getElementsByTagName(s)[0]; if (!d.getElementById(id)) { js = d.createElement(s); js.id = id; js.src = "https://weatherwidget.io/js/widget.min.js"; fjs.parentNode.insertBefore(js, fjs); } }(document, "script", "weatherwidget-io-js");
</script>
<br></br>
<div class="row">
  <div class="col-md-5">
    <div class="card">
      <div class="card-body">
        <canvas id="myChart"></canvas>
      </div>
    </div>

    <div class="card">
      <div class="card-body">
        <div id="container" style="width: 75%;">
          <canvas id="canvas"></canvas>
        </div>
      </div>
    </div>
  </div>


  <div class="col-md-7">
    <div class="card">
      <div class="card-header">
        <i class="icon-check"></i>Data PLC
        <ul class="nav nav-tabs float-right" role="tablist">
          <li class="nav-item">
            <a tab="" class="nav-link active" data-toggle="tab" href="#hsrg1" role="tab">HSRG 1</a>
          </li>
          <li class="nav-item">
            <a tab="" class="nav-link" data-toggle="tab" href="#hsrg2" role="tab">HSRG 2</a>
          </li>
        </ul>
      </div>
      <div class="card-body p-0">
        <div class="tab-content">
          <div class="tab-pane active" id="hsrg1">
            <table class="table table-hover table-align-middle mb-0">
              <thead>
                <tr>
                  <th>Gas</th>
                  <th>Data</th>
                  <th>Presentase</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>CO</td>
                  <td>
                    <i class="fa fa-exclamation" v-if="tags.hrsg1.CO.quality=='BAD'"></i>{{tags.hrsg1.CO.value}}</td>
                  <td>{{tags.hrsg1.CO.persen}}%</td>
                </tr>
                <tr>
                  <td>CO2</td>
                  <td>{{tags.hrsg1.CO2.value}}%</td>
                  <td>{{tags.hrsg1.CO2.persen}}%</td>
                </tr>
                <tr>
                  <td>FLOW</td>
                  <td>{{tags.hrsg1.FLOW.value }}</td>
                  <td>{{tags.hrsg1.FLOW.persen.toFixed(2)}}%</td>
                  </td>
                </tr>
                <tr>
                  <td>NOX</td>
                  <td>{{tags.hrsg1.NOX.value }}</td>
                  <td>{{tags.hrsg1.NOX.persen }}</td>
                </tr>
                <tr>
                  <td>O2</td>
                  <td>{{tags.hrsg1.O2.value }}</td>
                  <td>{{tags.hrsg1.CO.persen}}</td>
                </tr>
                <tr>
                  <td>OPACITY</td>
                  <td>{{tags.hrsg1.OPACITY.value }}</td>
                  <td>
                    <div class="progress progress-sm my-2">
                      <div class="progress-bar bg-info" aria-valuenow="{{tags.hrsg1.CO.value }}" aria-valuemin="0" aria-valuemax="100">
                        {{tags.hrsg1.CO.value}}</div>
                    </div>
                  </td>
                </tr>
                <tr>
                  <td>DUST</td>
                  <td>{{tags.hrsg1.DUST.value}}</td>
                  <td>
                    <div class="progress progress-sm my-2">
                      <div class="progress-bar bg-info" aria-valuenow="{{tags.hrsg1.CO.value }}" aria-valuemin="0" aria-valuemax="100">
                        {{tags.hrsg1.CO.value}}</div>
                    </div>
                  </td>
                </tr>
                <tr>
                  <td>SO2</td>
                  <td>{{tags.hrsg1.SO2.value}}</td>
                  <td>
                    <div class="progress progress-sm my-2">
                      <div class="progress-bar bg-info" aria-valuenow="{{tags.hrsg1.CO.value }}" aria-valuemin="0" aria-valuemax="100">
                        {{tags.hrsg1.CO.value}}</div>
                    </div>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
          <div class="tab-pane" id="hsrg2">
            <table class="table table-hover mb-0">
              <thead>
                <tr>
                  <th>Gas</th>
                  <th>Data</th>
                  <th>Presentase</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>CO</td>
                  <td>{{tags.hrsg2.CO.value}}</td>
                </tr>
                <tr>
                  <td>CO2</td>
                  <td>{{tags.hrsg2.CO2.value }}</td>
                  <td></td>
                </tr>
                <tr>
                  <td>FLOW</td>
                  <td>{{tags.hrsg2.FLOW.value }}</td>
                  <td></td>
                </tr>
                <tr>
                  <td>NOX</td>
                  <td>{{tags.hrsg2.NOX.value }}</td>
                  <td></td>
                </tr>
                <tr>
                  <td>O2</td>
                  <td>{{tags.hrsg2.O2.value }}</td>
                  <td></td>
                </tr>
                <tr>
                  <td>OPACITY</td>
                  <td>{{tags.hrsg2.OPACITY.value }}</td>
                  <td></td>
                </tr>
                <tr>
                  <td>DUST</td>
                  <td>{{tags.hrsg2.DUST.value }}</td>
                  <td></td>
                </tr>
                <tr>
                  <td>SO2</td>
                  <td>{{tags.hrsg2.SO2.value }}</td>
                  <td></td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>


<script>
    // without jQuery (doesn't work in older IEs)
    document.addEventListener('DOMContentLoaded', documentReady, false);

    function documentReady() {
      //'use strict';

window.chartColors = {
	red: 'rgb(255, 99, 132)',
	orange: 'rgb(255, 159, 64)',
	yellow: 'rgb(255, 205, 86)',
	green: 'rgb(75, 192, 192)',
	blue: 'rgb(54, 162, 235)',
	purple: 'rgb(153, 102, 255)',
	grey: 'rgb(201, 203, 207)'
};

(function(global) {
	var Months = [
		'January',
		'February',
		'March',
		'April',
		'May',
		'June',
		'July',
		'August',
		'September',
		'October',
		'November',
		'December'
	];

	var COLORS = [
		'#4dc9f6',
		'#f67019',
		'#f53794',
		'#537bc4',
		'#acc236',
		'#166a8f',
		'#00a950',
		'#58595b',
		'#8549ba'
	];

	var Samples = global.Samples || (global.Samples = {});
	var Color = global.Color;

	Samples.utils = {
		// Adapted from http://indiegamr.com/generate-repeatable-random-numbers-in-js/
		srand: function(seed) {
			this._seed = seed;
		},

		rand: function(min, max) {
			var seed = this._seed;
			min = min === undefined ? 0 : min;
			max = max === undefined ? 1 : max;
			this._seed = (seed * 9301 + 49297) % 233280;
			return min + (this._seed / 233280) * (max - min);
		},

		numbers: function(config) {
			var cfg = config || {};
			var min = cfg.min || 0;
			var max = cfg.max || 1;
			var from = cfg.from || [];
			var count = cfg.count || 8;
			var decimals = cfg.decimals || 8;
			var continuity = cfg.continuity || 1;
			var dfactor = Math.pow(10, decimals) || 0;
			var data = [];
			var i, value;

			for (i = 0; i < count; ++i) {
				value = (from[i] || 0) + this.rand(min, max);
				if (this.rand() <= continuity) {
					data.push(Math.round(dfactor * value) / dfactor);
				} else {
					data.push(null);
				}
			}

			return data;
		},

		labels: function(config) {
			var cfg = config || {};
			var min = cfg.min || 0;
			var max = cfg.max || 100;
			var count = cfg.count || 8;
			var step = (max - min) / count;
			var decimals = cfg.decimals || 8;
			var dfactor = Math.pow(10, decimals) || 0;
			var prefix = cfg.prefix || '';
			var values = [];
			var i;

			for (i = min; i < max; i += step) {
				values.push(prefix + Math.round(dfactor * i) / dfactor);
			}

			return values;
		},

		months: function(config) {
			var cfg = config || {};
			var count = cfg.count || 12;
			var section = cfg.section;
			var values = [];
			var i, value;

			for (i = 0; i < count; ++i) {
				value = Months[Math.ceil(i) % 12];
				values.push(value.substring(0, section));
			}

			return values;
		},

		color: function(index) {
			return COLORS[index % COLORS.length];
		},

		transparentize: function(color, opacity) {
			var alpha = opacity === undefined ? 0.5 : 1 - opacity;
			return Color(color).alpha(alpha).rgbString();
		}
	};

	// DEPRECATED
	window.randomScalingFactor = function() {
		return Math.round(Samples.utils.rand(-100, 100));
	};

	// INITIALIZATION

	Samples.utils.srand(Date.now());

	// Google Analytics
	/* eslint-disable */
	if (document.location.hostname.match(/^(www\.)?chartjs\.org$/)) {
		(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
		(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
		m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
		})(window,document,'script','//www.google-analytics.com/analytics.js','ga');
		ga('create', 'UA-28909194-3', 'auto');
		ga('send', 'pageview');
	}
	/* eslint-enable */

}(this));

      var MONTHS = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
      var color = Chart.helpers.color;
      var barChartData = {
        labels: ["January", "February", "March", "April", "May", "June", "July"],
        datasets: [{
          label: 'Dataset 1',
          backgroundColor: '#F00',//color(window.chartColors.red).alpha(0.5).rgbString(),
          borderColor: '#F00',//window.chartColors.red,
          borderWidth: 1,
          data: [
            randomScalingFactor(),
            randomScalingFactor(),
            randomScalingFactor(),
            randomScalingFactor(),
            randomScalingFactor(),
            randomScalingFactor(),
            randomScalingFactor()
          ]
        }, {
          label: 'Dataset 2',
          backgroundColor: '#00f',//color(window.chartColors.blue).alpha(0.5).rgbString(),
          borderColor: '#00F',//window.chartColors.blue,
          borderWidth: 1,
          data: [
            randomScalingFactor(),
            randomScalingFactor(),
            randomScalingFactor(),
            randomScalingFactor(),
            randomScalingFactor(),
            randomScalingFactor(),
            randomScalingFactor()
          ]
        }]
      };
      window.onload = function () {
        var ctx = document.getElementById("canvas").getContext("2d");
        window.myBar = new Chart(ctx, {
          type: 'bar',
          data: barChartData,
          options: {
            responsive: true,
            legend: {
              position: 'top',
            },
            title: {
              display: true,
              text: 'Chart.js Bar Chart'
            }
          }
        });
      };
      document.getElementById('randomizeData').addEventListener('click', function () {
        var zero = Math.random() < 0.2 ? true : false;
        barChartData.datasets.forEach(function (dataset) {
          dataset.data = dataset.data.map(function () {
            return zero ? 0.0 : randomScalingFactor();
          });
        });
        window.myBar.update();
      });
      var colorNames = Object.keys(window.chartColors);
      document.getElementById('addDataset').addEventListener('click', function () {
        var colorName = colorNames[barChartData.datasets.length % colorNames.length];;
        var dsColor = window.chartColors[colorName];
        var newDataset = {
          label: 'Dataset ' + barChartData.datasets.length,
          backgroundColor: color(dsColor).alpha(0.5).rgbString(),
          borderColor: dsColor,
          borderWidth: 1,
          data: []
        };
        for (var index = 0; index < barChartData.labels.length; ++index) {
          newDataset.data.push(randomScalingFactor());
        }
        barChartData.datasets.push(newDataset);
        window.myBar.update();
      });
      document.getElementById('addData').addEventListener('click', function () {
        if (barChartData.datasets.length > 0) {
          var month = MONTHS[barChartData.labels.length % MONTHS.length];
          barChartData.labels.push(month);
          for (var index = 0; index < barChartData.datasets.length; ++index) {
            //window.myBar.addData(randomScalingFactor(), index);
            barChartData.datasets[index].data.push(randomScalingFactor());
          }
          window.myBar.update();
        }
      });
      document.getElementById('removeDataset').addEventListener('click', function () {
        barChartData.datasets.splice(0, 1);
        window.myBar.update();
      });
      document.getElementById('removeData').addEventListener('click', function () {
        barChartData.labels.splice(-1, 1); // remove the label first
        barChartData.datasets.forEach(function (dataset, datasetIndex) {
          dataset.data.pop();
        });
        window.myBar.update();
      });
    }

  </script>